apply {
    plugin "com.android.application"
    plugin "kotlin-android"
    plugin "kotlin-android-extensions"
}

android {
    compileSdkVersion Config.compileSdkVersion
    defaultConfig {
        minSdkVersion Config.minSdkVersion
        versionCode Config.versionCode
        versionName Config.versionName
//        applicationId Config.applicationId + suffix
        applicationId Config.applicationId
        targetSdkVersion Config.targetSdkVersion
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file("../keystore/learn.keystore")
            storePassword "learn123@"
            keyAlias "learn"
            keyPassword "learn123@\""
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            applicationIdSuffix ".debug"
//            resValue "string", "app_name", Config.appName + suffix + ".debug"
//            resValue "string", "app_name", Config.appName + ".debug"
            resValue "string", "app_name", Config.appName
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            resValue "string", "app_name", Config.appName + suffix
            resValue "string", "app_name", Config.appName
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    // LeakCanary
//    debugImplementation Config.depConfig.leakcanary_android.dep

//    for (def entrySet : ConfigUtils.getTestDeps().entrySet()) {
//        if(entrySet.key == "junit"){
//            testImplementation entrySet.value.dep
//        }else {
//            androidTestImplementation entrySet.value.dep
//        }
//    }
    // 根据 Config.pkgConfig 来依赖所有 pkg
//    for (def entrySet : ConfigUtils.getAppDeps().entrySet()) {
//        api entrySet.value.dep
//    }
    //lib
//    api Config.libConfig.lib_common.dep
    for (def entrySet : ConfigUtils.getApplyLibs().entrySet()) {
        api entrySet.value.dep
    }
}
